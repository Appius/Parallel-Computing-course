<problem display_name="Pipeline functional units" markdown="&gt;&gt;В чем смысл &quot;конвейерной обработки&quot; (pipeline functional units)?&lt;&lt;&#10;     (x) Это способ выполнения команд процессором, при котором выполнение следующей команды начинается до полного окончания выполнения предыдущей команды.&#10;     ( ) Процессор считывает блок инструкций заранее, и сохраняет их в кэше для более быстрого последующего доступа (в разы быстрее чем считывание из оперативной памяти).&#10;     ( ) Процессор за один такт выполняет одну и ту же инструкцию над несколькими блоками данных.&#10;     ( ) Процессор вычисляет с некоторой вероятностью, будет ли выполнен условный переход в исполняемой программе или нет, что позволяет предварительно подготовится к переходу (например, заранее освободить ресурсы для выполнения).&#10;     &#10;[explanation]&#10;Идея заключается в разделении обработки компьютерной инструкции на последовательность независимых стадий с сохранением результатов в конце каждой стадии. Это позволяет управляющим цепям процессора получать инструкции со скоростью самой медленной стадии обработки, однако при этом намного быстрее, чем при выполнении эксклюзивной полной обработки каждой инструкции от начала до конца.&#10;[explanation]&#10;" max_attempts="2" rerandomize="never" showanswer="never">
  <p>В чем смысл "конвейерной обработки" (pipeline functional units)?</p>
  <multiplechoiceresponse>
    <choicegroup label="В чем смысл &quot;конвейерной обработки&quot; (pipeline functional units)?" type="MultipleChoice">
      <choice correct="true">Это способ выполнения команд процессором, при котором выполнение следующей команды начинается до полного окончания выполнения предыдущей команды.</choice>
      <choice correct="false">Процессор считывает блок инструкций заранее, и сохраняет их в кэше для более быстрого последующего доступа (в разы быстрее чем считывание из оперативной памяти).</choice>
      <choice correct="false">Процессор за один такт выполняет одну и ту же инструкцию над несколькими блоками данных.</choice>
      <choice correct="false">Процессор вычисляет с некоторой вероятностью, будет ли выполнен условный переход в исполняемой программе или нет, что позволяет предварительно подготовится к переходу (например, заранее освободить ресурсы для выполнения).</choice>
    </choicegroup>
  </multiplechoiceresponse>
  <solution>
    <div class="detailed-solution">
      <p>Explanation</p>
      <p>Идея заключается в разделении обработки компьютерной инструкции на последовательность независимых стадий с сохранением результатов в конце каждой стадии. Это позволяет управляющим цепям процессора получать инструкции со скоростью самой медленной стадии обработки, однако при этом намного быстрее, чем при выполнении эксклюзивной полной обработки каждой инструкции от начала до конца.</p>
    </div>
  </solution>
</problem>
