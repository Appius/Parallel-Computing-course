<problem display_name="Actors" markdown="null" max_attempts="1" showanswer="never">
  <p>Есть следующий код.</p>
  <pre style="color:#000000;background:#ffffff;"><span style="color:#7f0055; font-weight:bold; ">class</span> MoocActor <span style="color:#7f0055; font-weight:bold; ">extends</span> Actor {
  override def receive: Receive = initialState(3)

  def initialState(n: Int): Receive = {
    <span style="color:#7f0055; font-weight:bold; ">case</span> <span style="color:#2a00ff; ">"Inc"</span> =&gt; context.become(initialState(n+1))
    <span style="color:#7f0055; font-weight:bold; ">case</span> <span style="color:#2a00ff; ">"Dec"</span> =&gt; context.become(initialState(n-1))
    <span style="color:#7f0055; font-weight:bold; ">case</span> <span style="color:#2a00ff; ">"Transit"</span> =&gt; <span style="color:#7f0055; font-weight:bold; ">if</span> (n == 0) context.become(finishing)
  }

  def finishingState: Receive = {
    <span style="color:#7f0055; font-weight:bold; ">case</span> <span style="color:#2a00ff; ">"Finish"</span> =&gt; { println(“Finished”); context.stop(self) }
    <span style="color:#7f0055; font-weight:bold; ">case</span> <span style="color:#2a00ff; ">"Reset"</span>  =&gt; context.become(initialState(3))
  }
}

object Program {
  def main(args: <span style="color:#7f0055; font-weight:bold; ">Array</span>[<span style="color:#7f0055; font-weight:bold; ">String</span>]) {
    val system = ActorSystem(<span style="color:#2a00ff; ">"mooc"</span>)
    val moocActor = system.actorOf(Props[MoocActor])
    
    <span style="color:#3f7f59; ">// your code goes here</span>
    <span style="color:#3f7f59; ">// moocActor ! "SomeMessage1"</span>
    <span style="color:#3f7f59; ">// moocActor ! "SomeMessage2"</span>
    <span style="color:#3f7f59; ">// moocActor ! "SomeMessage3"</span>

    system.shutdown()
  }
}
    </pre>
  <br/>
  <p> Какую наименьшую последовательность сообщений необходимо послать актору moocActor, чтобы в консоль было выведено &gt; Finished.<br/> Оператор “!” - синоним метода tell(), для отправки сообщения актору.</p>
  <customresponse>
    <drag_and_drop_input img="/static/lec4_task3.jpg" target_outline="true" one_per_target="true" no_labels="true" label_bg_color="rgb(222, 139, 238)">
      <draggable can_reuse="true" id="1" label="Inc"/>
      <draggable can_reuse="true" id="2" label="Dec"/>
      <draggable can_reuse="true" id="3" label="Transit"/>
      <draggable can_reuse="true" id="4" label="Finish"/>
      <draggable can_reuse="true" id="5" label="Reset"/>
      <target id="t1" x="0" y="0" w="75" h="100"/>
      <target id="t2" x="125" y="0" w="75" h="100"/>
      <target id="t3" x="250" y="0" w="75" h="100"/>
      <target id="t4" x="375" y="0" w="75" h="100"/>
      <target id="t5" x="500" y="0" w="75" h="100"/>
      <target id="t6" x="625" y="0" w="75" h="100"/>
    </drag_and_drop_input>
    <answer type="loncapa/python">
correct_answer = [
          { 'draggables': ['2'], 'targets': ['t1', 't2', 't3'], 'rule': 'exact' },
          { 'draggables': ['3'], 'targets': ['t4'], 'rule': 'exact' },
          { 'draggables': ['4'], 'targets': ['t5'], 'rule': 'exact' }
]
if draganddrop.grade(submission[0], correct_answer):
    correct = ['correct']
else:
    correct = ['incorrect']
        </answer>
  </customresponse>
</problem>
